#!/bin/sh


export PATH=/sbin:/bin:/usr/sbin:/usr/bin:$PATH

. /bin/midge_functions

CMD_VERBOSE=1

pre_ifup(){
	info 1 "Setting up $iface: "
	info 1 "  Interface pre-configuration:"
	case $proto in
		ether)
			[ -n "$mac" ] && cmd /sbin/ifconfig $realiface hw ether $mac
			;;
		bridge)
			[ -n "$mac" ] && cmd /sbin/ifconfig $realiface hw ether $mac
			required brctl
			cmd brctl addbr $realiface
			for i in $br_ifaces; do
				cmd /usr/sbin/ip addr flush dev $i
				cmd /usr/sbin/ip link set $i up
				cmd brctl addif $realiface $i
			done
			[ "$br_stp" = 1 ] && cmd brctl stp $realiface on || cmd brctl stp $realiface off
			[ -n "$br_prio" ] && cmd brctl setbridgeprio $realiface $br_prio 
			[ -n "$br_hello" ] && cmd brctl sethello $realiface $br_hello 
			[ -n "$br_maxage" ] && cmd brctl setmaxage $realiface $br_maxage 
			[ -n "$br_fd" ] && cmd brctl setfd $realiface $br_fd 

			;;
		bonding) 
			cmd /sbin/modprobe bonding mode=0 miimon=200
			[ -n "$mac" ] && cmd /sbin/ifconfig $realiface hw ether $mac
			required /sbin/ifenslave
			cmd /usr/sbin/ip link set $realiface up
			for i in $bond_ifaces; do 
				cmd /usr/sbin/ip addr flush dev $i
				cmd /usr/sbin/ip link set $i up
				cmd /sbin/ifenslave $realiface $i
			done
			;;
		ipsec)
			# TODO
			;;
	esac
}

post_ifup(){
	info 1 "  Interface post-configuration"
	# TODO routes, qos, udhcpd
	if [ "$dhcp_enabled" = 1 ]; then
		/etc/init.d/udhcpd start $realiface
	fi

	/etc/init.d/qos start $realiface

	eval `kdb -qq ls sys_ntpclient_`
	if [ "$sys_ntpclient_enabled" = "1" -a -x /usr/sbin/ntpclient ] && /sbin/route -n | grep ^0.0.0.0 >/dev/null; then
		info 2 "  Synchronizing time"
		cmd /usr/sbin/ntpclient -c 1 -s -h ${sys_ntpclient_server:-pool.ntp.org}
	fi

	# setup interface options
	[ -n "$opt_accept_redirects" ] && \
		echo "$opt_accept_redirects" >/proc/sys/net/ipv4/conf/$iface/accept_redirects

	[ -n "$opt_forwarding" ] && \
		echo "$opt_forwarding" >/proc/sys/net/ipv4/conf/$iface/forwarding

	[ -n "$opt_proxy_arp" ] && \
		echo "$opt_proxy_arp" >/proc/sys/net/ipv4/conf/$iface/proxy_arp

	[ -n "$opt_rp_filter" ] && \
		echo "$opt_rp_filter" >/proc/sys/net/ipv4/conf/$iface/rp_filter

}

_ifup(){
	iface=$1
	eval `kdb -qq sls sys_iface_${iface}_`
	realiface=$iface
	[ -n "$real" ] && realiface=$real

	[ -z $proto ] && echo "sys_iface_${iface}_proto is not set" && exit 1
	[ -z $method ] && echo "sys_iface_${iface}_method is not set" && exit 1
	[ "$enabled" = 0 ] && return 

	echo 1 > /proc/sys/net/ipv4/ip_forward

	pre_ifup 

	get_next_ppp(){
		cur=`/sbin/ip -o link | sed "s/^\([0-9]*\): \([a-z]*\)\([0-9]*\):.*$/\2-\3/" | grep ppp | cut -d- -f2`
		[ 0 -le "$cur" ] && echo $(($cur+1)) || echo 0
	}
	update_ppp_password() {
		info 2 "Updating /etc/ppp/chap-secrets"
	}

	ppp_opt="linkname $iface"
	info 1 "  Interface configuration"
	case $proto in
		bridge|ether|bonding)
			case $method in
			static)
				opts="$realiface"
				[ -n "$ipaddr" ] && opts="$opts $ipaddr" || opts="$opts 0.0.0.0"
				[ -n "$netmask" ] && opts="$opts netmask $netmask"
				[ -n "$broadcast" ] && opts="$opts broadcast $broadcast"
				cmd /sbin/ifconfig $opts
				if [ -n "$gateway" ]; then
					cmd /sbin/route del default 2>/dev/null
					cmd /sbin/route add default gw $gateway 
				fi
				;;
			dynamic)
				eval `kdb -qq ls sys_hostname`
				opts=" -i $realiface --hostname=$sys_hostname --background -p /var/run/udhcpc.$iface.pid"
				cmd /sbin/udhcpc $opts 
				;;
			zeroconf)
				required zcip
				opts="-q $realiface /usr/share/zcip/zcip.script"
				cmd /usr/sbin/ip link set $realiface up
				cmd /sbin/zcip $opts 
				;;
			none)
				cmd /usr/sbin/ip link set $realiface up
				;;
			esac
			;;
		pptp)
			next="ppp`get_next_ppp`"
			[ -r /var/run/ppp-$iface.pid ] && kill `cat /var/run/ppp-$iface.pid`
			[ -r /var/run/$next.pid ] && kill `cat /var/run/$next.pid`
			[ -d /proc/sys/net/ipv4/conf/$next ] && warn "Something wrong, /proc/sys/net/ipv4/conf/$next already present"
			required pptp
			update_ppp_password $pptp_username $pptp_password
			cmd pptp $pptp_server $pptp_pppdopt $ppp_opt || next=""
			kdb set sys_iface_${iface}_real=$next
			;;
		pppoe)
			next="ppp`get_next_ppp`"
			[ -r /var/run/ppp-$iface.pid ] && kill `cat /var/run/ppp-$iface.pid`
			[ -r /var/run/$next.pid ] && kill `cat /var/run/$next.pid`
			[ -d /proc/sys/net/ipv4/conf/$next ] && warn "Something wrong, /proc/sys/net/ipv4/conf/$next already present"
			required pppoe
			update_ppp_password $pppoe_username $pppoe_password
			cmd pppoe -I $pppoe_iface || next="" # TODO read man -p /var/run/pppoe-$iface.pid || next=""
			kdb set sys_iface_${iface}_real=$next
			;;

		ipsec)
			# TODO
			;;
	esac


	post_ifup
	echo "done."
}

pre_ifdown() {
	if [ -r "/var/run/udhcpd.$iface.pid" ]; then
		info 2 "  Killing udhcpd"
		kill `cat /var/run/udhcpd.$iface.pid`
	fi
	/etc/init.d/udhcpd stop $iface
}

post_ifdown() {
	info 1 "  Interface post-deconfiguration"
	case $proto in
		bridge)
			required brctl
			for i in $br_ifaces; do
				cmd brctl delif $realiface $i
			done
			cmd brctl delbr $realiface
			;;
		bonding) 
			# TODO
			;;
		ipsec)
			# TODO
			;;
	esac
}

_ifdown(){
	iface=$1
	eval `kdb -qq sls sys_iface_${iface}_`
	realiface=$iface
	[ -n "$real" ] && realiface=$real

	[ -z $proto ] && echo "sys_iface_${iface}_proto is not set" && exit 1
	[ -z $method ] && echo "sys_iface_${iface}_method is not set" && exit 1
	info 1 "Setting down $iface: "
	info 1 "  Interface deconfiguration"

	cmd /sbin/ifconfig $realiface down
		case $type in
		static)
			;;
		dhcp)
			;;
		pppoe)
			;;
		pptp)
			;;
		ipsec)
			;;
		esac
	post_ifdown
	info 1 "done."
}

_network(){
	for iface in $sys_ifaces; do
		eval `kdb -lqq sls sys_iface_${iface}_`
		[ "$1" = "start" -a "$auto" = "1" ] && _ifup $iface
		[ "$1" = "stop" ] && _ifdown $iface
		if [ "$1" = "restart" ]; then
			/sbin/ifdown $iface
			/sbin/ifup $iface 
		fi
	done
}

eval `kdb -qq ls sys_iface`

case "$0" in
	*network)
		# starts all ifaces
		_network $@
		;;
	*ifup)
		[ "x$1" = "x-a" ] && /etc/init.d/network start || _ifup $1
		;;
	*ifdown)
		[ "x$1" = "x-a" ] && /etc/init.d/network stop || _ifdown $1
		;;
	esac



