--- sercd-3.0.0/sercd.c.orig	2010-03-24 21:18:21.000000000 +0600
+++ sercd-3.0.0/sercd.c	2010-03-24 21:18:44.000000000 +0600
@@ -97,6 +97,7 @@ typedef enum
 { IACNormal, IACReceived, IACComReceiving }
 IACState;
 
+#ifndef NO_TELNET
 /* Effective status for IAC escaping and interpretation */
 static IACState IACEscape = IACNormal;
 
@@ -108,6 +109,7 @@ static unsigned char IACCommand[TmpStrLe
 
 /* Position of insertion into IACCommand[] */
 static size_t IACPos;
+#endif
 
 /* Modem state mask set by the client */
 static unsigned char ModemStateMask = ((unsigned char) 255);
@@ -129,6 +131,7 @@ Boolean BreakSignaled = False;
 /* Input flow control flag */
 Boolean InputFlow = True;
 
+#ifndef NO_TELNET
 /* Telnet State Machine */
 static struct _tnstate
 {
@@ -140,6 +143,7 @@ static struct _tnstate
     int is_do:1;
 }
 tnstate[256];
+#endif
 
 /* Function prototypes */
 
@@ -241,6 +245,7 @@ void EscWriteBuffer(BufferType * B, unsi
 void
 InitTelnetStateMachine(void)
 {
+#ifndef NO_TELNET
     int i;
     for (i = 0; i < sizeof(tnstate) / sizeof(tnstate[0]) ; i++) {
 	tnstate[i].sent_do = 0;
@@ -250,6 +255,7 @@ InitTelnetStateMachine(void)
 	tnstate[i].is_do = 0;
 	tnstate[i].is_will = 0;
     }
+#endif
 }
 
 /* Setup sockets for low latency and automatic keepalive; doesn't
@@ -416,6 +422,7 @@ BreakFunction(int unused)
 /* Send the signature Sig to the client. Sig must not be longer than
    255 characters. */
 #define SendSignature_bytes (6 + 2 * 255)
+#ifndef NO_TELNET
 void
 SendSignature(BufferType * B, char *Sig)
 {
@@ -428,6 +435,7 @@ SendSignature(BufferType * B, char *Sig)
     AddToBuffer(B, TNIAC);
     AddToBuffer(B, TNSE);
 }
+#endif
 
 /* Write a char to socket performing IAC escaping */
 #define EscWriteChar_bytes 2
@@ -437,10 +445,12 @@ EscWriteChar(BufferType * B, unsigned ch
     /* Last received byte */
     static unsigned char Last = 0;
 
+#ifndef NO_TELNET
     if (C == TNIAC)
 	AddToBuffer(B, C);
     else if (C != 0x0A && !tnstate[TN_TRANSMIT_BINARY].is_will && Last == 0x0D)
 	AddToBuffer(B, 0x00);
+#endif
     AddToBuffer(B, C);
 
     /* Set last received byte */
@@ -456,6 +466,7 @@ EscRedirectChar(BufferType * SockB, Buff
     /* Last received byte */
     static unsigned char Last = 0;
 
+#ifndef NO_TELNET
     /* Check the IAC escape status */
     switch (IACEscape) {
 	/* Normal status */
@@ -586,13 +597,16 @@ EscRedirectChar(BufferType * SockB, Buff
 	}
 	break;
     }
-
+#else
+    AddToBuffer(DevB, C);
+#endif
     /* Set last received byte */
     Last = C;
 }
 
 /* Send the specific telnet option to SockFd using Command as command */
 #define SendTelnetOption_bytes 3
+#ifndef NO_TELNET
 void
 SendTelnetOption(BufferType * B, unsigned char Command, char Option)
 {
@@ -602,12 +616,14 @@ SendTelnetOption(BufferType * B, unsigne
     AddToBuffer(B, Command);
     AddToBuffer(B, Option);
 }
+#endif
 
 /* Send initial Telnet negotiations to the client */
 #define SendTelnetInitialOptions_bytes (SendTelnetOption_bytes*3)
 void
 SendTelnetInitialOptions(BufferType * B)
 {
+#ifndef NO_TELNET
     SendTelnetOption(B, TNWILL, TN_TRANSMIT_BINARY);
     tnstate[TN_TRANSMIT_BINARY].sent_will = 1;
     SendTelnetOption(B, TNDO, TN_TRANSMIT_BINARY);
@@ -620,6 +636,7 @@ SendTelnetInitialOptions(BufferType * B)
     tnstate[TN_SUPPRESS_GO_AHEAD].sent_do = 1;
     SendTelnetOption(B, TNDO, TNCOM_PORT_OPTION);
     tnstate[TNCOM_PORT_OPTION].sent_do = 1;
+#endif
 }
 
 /* Send a string to SockFd performing IAC escaping
@@ -633,11 +650,16 @@ SendStr(BufferType * B, char *Str)
     L = strlen(Str);
 
     for (I = 0; I < L; I++)
+#ifndef NO_TELNET
 	EscWriteChar(B, (unsigned char) Str[I]);
+#else
+	AddToBuffer(B, Str[I]);
+#endif
 }
 
 /* Send the baud rate BR to Buffer */
 #define SendBaudRate_bytes (6 + 2*sizeof(unsigned long int))
+#ifndef NO_TELNET
 void
 SendBaudRate(BufferType * B, unsigned long int BR)
 {
@@ -657,9 +679,11 @@ SendBaudRate(BufferType * B, unsigned lo
     AddToBuffer(B, TNIAC);
     AddToBuffer(B, TNSE);
 }
+#endif
 
 /* Send the CPC command Command using Parm as parameter */
 #define SendCPCByteCommand_bytes 8
+#ifndef NO_TELNET
 void
 SendCPCByteCommand(BufferType * B, unsigned char Command, unsigned char Parm)
 {
@@ -671,10 +695,12 @@ SendCPCByteCommand(BufferType * B, unsig
     AddToBuffer(B, TNIAC);
     AddToBuffer(B, TNSE);
 }
+#endif
 
 /* Handling of COM Port Control specific commands */
 #define HandleCPCCommand_bytes \
  MAX(SendSignature_bytes, MAX(SendBaudRate_bytes, SendCPCByteCommand_bytes))
+#ifndef NO_TELNET
 void
 HandleCPCCommand(BufferType * SockB, PORTHANDLE PortFd, unsigned char *Command, size_t CSize)
 {
@@ -914,9 +940,11 @@ HandleCPCCommand(BufferType * SockB, POR
 	break;
     }
 }
+#endif
 
 /* Common telnet IAC commands handling */
 #define HandleIACCommand_bytes MAX(HandleCPCCommand_bytes, SendTelnetOption_bytes)
+#ifndef NO_TELNET
 void
 HandleIACCommand(BufferType * SockB, PORTHANDLE PortFd, unsigned char *Command, size_t CSize)
 {
@@ -1078,6 +1106,7 @@ HandleIACCommand(BufferType * SockB, POR
 	break;
     }
 }
+#endif
 
 /* Check and act upon read/write result. Uses errno. Returns true on error. */
 Boolean
@@ -1325,7 +1354,9 @@ main(int argc, char **argv)
 	SetSocketOptions(*InSocketFd, *OutSocketFd);
 	InitBuffer(&ToNetBuf);
 	InitTelnetStateMachine();
+#ifndef NO_TELNET
 	SendTelnetInitialOptions(&ToNetBuf);
+#endif
     }
     else {
 	/* Standalone mode */
@@ -1583,8 +1614,10 @@ main(int argc, char **argv)
 		if ((newstate & ModemStateMask & TNCOM_MODMASK_NODELTA)
 		    != (ModemState & ModemStateMask & TNCOM_MODMASK_NODELTA)) {
 		    ModemState = newstate;
+#ifndef NO_TELNET
 		    SendCPCByteCommand(&ToNetBuf, TNASC_NOTIFY_MODEMSTATE,
 				       (ModemState & ModemStateMask));
+#endif
 		    snprintf(LogStr, sizeof(LogStr), "Sent modem state: %u",
 			     (unsigned int) (ModemState & ModemStateMask));
 		    LogStr[sizeof(LogStr) - 1] = '\0';
