#!/bin/sh

check_tcpam_rate() {
	tcpam=$1
	rate=$2
	case "$tcpam" in
		2)
			if [ "$rate" -lt "192" ]; then
				echo "On tcpam8 rate must be from 192 to 3840 Kbit/s"
				return 1
			fi
			if [ "$rate" -gt "3840" ]; then
				echo "On tcpam8 rate must be from 192 to 3840 Kbit/s"
				return 1
			fi
		;;
		3)
			if [ "$rate" -lt "192" ]; then
				echo "On tcpam16 rate must be from 192 to 3840 Kbit/s"
				return 1
			fi
			if [ "$rate" -gt "3840" ]; then
				echo "On tcpam16 rate must be from 192 to 3840 Kbit/s"
				return 1
			fi
		;;
		4)
			if [ "$rate" -lt "768" ]; then
				echo "On tcpam32 rate must be from 768 to 10176 Kbit/s"
				return 1
			fi
			if [ "$rate" -gt "10176" ]; then
				echo "On tcpam32 rate must be from 768 to 10176 Kbit/s"
				return 1
			fi
		;;
		5)
			if [ "$rate" -lt "768" ]; then
				echo "On tcpam64 rate must be from 768 to 12736 Kbit/s"
				return 1
			fi
			if [ "$rate" -gt "12736" ]; then
				echo "On tcpam64 rate must be from 768 to 12736 Kbit/s"
				return 1
			fi
		;;
		6)
			if [ "$rate" -lt "768" ]; then
				echo "On tcpam128 rate must be from 768 to 15296 Kbit/s"
				return 1
			fi
			if [ "$rate" -gt "15296" ]; then
				echo "On tcpam128 rate must be from 768 to 15296 Kbit/s"
				return 1
			fi
		;;
	esac
	return 0
}

print_dsl_status() {
	cd /sys/class/net/$iface/ms_private
	master=`cat mode`
	code=`cat tcpam`
	rate=`cat rate`
	if [ -n "$rate" ]; then
		rate="rate=$rate"
	else
		rate=""
	fi
	annex=`cat annex`    
	if [ -n "$annex" ]; then
		annex="annex=$annex"
	else
		annex=""
	fi
	if [ "$master" = "master" ]; then
		pbo=`cat pbo_mode`
		pbo_val=`cat pbo_val`
		[ "$pbo" = "Forced" ] && pbo="${pbo} ${pbo_val} dB"
	else
		pbo=""
	fi
	pwr_mod=`cat pwr_source`
	pwron=`cat pwron`
	pwrovl=`cat pwrovl`
	pwrunb=`cat pwrunb`
#	echo "$iface:"
	up_time=`cat uptime`
	on_off=`cat on_off`
	up_time_all=`cat uptime_all`
	down_time_all=`cat downtime_all`
	if [ "$up_time" = "0 d 00:00:00" ]; then
		echo -e "Status:\n\tOFFLINE"
	else
		echo -e "Status:\n\tONLINE Connect duration=$up_time Total online time=$up_time_all Total offline time=$down_time_all"
	fi
	echo -en "shdsl:\n\t$on_off $master $rate $code $annex"
	[ -n "$pbo" ] && echo -en " PBO=$pbo"
	echo -e "\nStatistics:"
	cat statistics
	if [ "$pwr_mod" = "1" ]; then
		echo -e "Power:"
		echo -e "\tpwron=$pwron overload=$pwrovl unbalance=$pwrunb"
	else
		echo -e "Power:"
		echo -e "\tnone"
	fi
	echo ""
}


print_dsl_status_all()
{
	echo -e "----------------------------------------------------------------------"
	echo "port  on/off state   mode power  rate    tcpam   SNR            uptime"
	echo -e "----------------------------------------------------------------------"
	cd /sys/class/net
	for iface in *; do
		if [ -d "$iface/ms_private" ]; then
			bkp_dir=`pwd`
			cd "$iface/ms_private"
			on_off=`cat on_off`
			if [ "$on_off" = "on" ]; then
				on_off=" on"
			fi
			up_time=`cat uptime`
			online="offline"
			mode=`cat mode`
			if [ "$mode" = "slave" ]; then
				mode=" slave"
			fi
			pwr_mod=`cat pwr_source`
			
			if [ "$pwr_mod" = "1" ]; then
				pwron=`cat pwron`
				if [ "$pwron" = "1" ]; then
					power=" on"
				else
					power="off"
				fi
			else
				power="none"
			fi
			if [ "$up_time" != "0 d 00:00:00" ]; then
				online=" online"
			fi
			rate=`cat rate`
			if [ "${#rate}" = "0" ]; then
				rate="     "
			fi
			if [ "${#rate}" = "4" ]; then
				rate=" "$rate
			fi
			if [ "${#rate}" = "3" ]; then
				rate="  "$rate
			fi
			tcpam=`cat tcpam`
			if [ "${#tcpam}" = "0" ]; then
				tcpam="        "
			fi
			if [ "${#tcpam}" = "7" ]; then
				tcpam=" "$tcpam
			fi
			if [ "${#tcpam}" = "6" ]; then
				tcpam="  "$tcpam
			fi
			snr=`cat statistics_row`
			for i in $snr; do
				snr=$i
				break;
			done
			if [ "${#snr}" = "1" ]; then
				snr="  "$snr"dB"
			else
				if [ "${#snr}" = "2" ]; then
					snr=" "$snr"dB"
				else
					snr=$snr"dB"
				fi
			fi
			iface=`expr substr $iface 1 4`"/"`expr substr $iface 5 1`
			if [ "$online" = " online" ]; then
				echo -e "$iface $on_off $online $mode   $power $rate $tcpam $snr $up_time"
			else
				if [ "$mode" = "master" ]; then
					echo -e "$iface $on_off $online $mode   $power $rate $tcpam $snr"
				else
					echo -e "$iface $on_off $online $mode   $power"
				fi
			fi
			
			echo -e "----------------------------------------------------------------------"
			cd $bkp_dir
		fi
	done
}

print_ge_fe_status() {
	sw=$1
	sw_port=$2
	iface=$3

	echo "$sw_port" > /proc/sys/net/dslam_sw/$sw/status
	status=`cat /proc/sys/net/dslam_sw/$sw/status`
	let "tmp=0"
	for i in $status; do
		if [ "$tmp" = "1" ]; then
			flow=$i
		fi
		if [ "$tmp" = "2" ]; then
			duplex=$i
		fi
		if [ "$tmp" = "3" ]; then
			speed=$i
		fi
		if [ "$tmp" = "4" ]; then
			state=$i
			if [ "$state" = "up" ]; then
				state="online"
			else
				state="offline"
			fi
		fi
		if [ "$tmp" = "5" ]; then
			auto=$i
			if [ "$auto" = "auto" ]; then
				auto="auto"
			else
				auto="manual"
			fi
		fi
		if [ "$tmp" = "6" ]; then
			on_off=$i
		fi
		let "tmp=$tmp+1"
	done
	tx_rx=`cat /proc/sys/net/dslam_sw/$sw/statistics`
	let "tmp=0"
	if [ "$sw_port" = "24" ]; then
		pos=78
	else
		pos=$(($(($sw_port+1))*3))
	fi
	for i in $tx_rx; do
		if [ "$tmp" = $(($pos+1)) ]; then
			tx=$i
		fi
		if [ "$tmp" = $(($pos+2)) ]; then
			rx=$i
		fi
		let "tmp=$tmp+1"
	done
	pwr_src=`cat /sys/class/net/${iface}/ms_private/pwr_source`
	if [ "$pwr_src" = "1" ]; then
		pwr_en=`cat /sys/class/net/${iface}/ms_private/pwr_enable`
		if [ "$pwr_en" = "1" ]; then
			echo -e "\nPoE=on"
		else
			echo -e "\nPoE=off"
		fi
	fi
	echo -e "on\off=$on_off\nstate=$state\nconfiguration=$auto\nflow control=$flow\nrate=$speed Mbps\nduplex=$duplex"
	echo -e "transmited packages=$tx\nreceived packages=$rx\n"
}


print_ge_status_all() {
	echo "------------------------------------------------------------------"
	echo "port  on/off  state config flow speed duplex TX packets RX packets"
	echo "------------------------------------------------------------------"
	for g in 0 1; do

	echo "24" > /proc/sys/net/dslam_sw/sw$g/status
	status=`cat /proc/sys/net/dslam_sw/sw$g/status`
	let "tmp=0"
	for i in $status; do
		if [ "$tmp" = "1" ]; then
			flow=$i
			if [ "$flow" = "on" ]; then
				flow=" on"
			fi
		fi
		if [ "$tmp" = "2" ]; then
			duplex=$i
		fi
		if [ "$tmp" = "3" ]; then
			speed=$i
			if [ "$speed" = "10" ]; then
				speed="  10";
			fi
			if [ "$speed" = "100" ]; then
				speed=" 100";
			fi
		fi
		if [ "$tmp" = "4" ]; then
			state=$i
			if [ "$state" = "up" ]; then
				state=" online"
			else
				state="offline"
			fi
		fi
		if [ "$tmp" = "5" ]; then
			auto=$i
			if [ "$auto" = "auto" ]; then
				auto="  auto"
			else
				auto="manual"
			fi
		fi
		if [ "$tmp" = "6" ]; then
			on_off=$i
			if [ "$on_off" = "on" ]; then
				on_off="   on  "
			else
				on_off="  off  "
			fi
		fi
		let "tmp=$tmp+1"
	done
	tx_rx=`cat /proc/sys/net/dslam_sw/sw$g/statistics`
	let "tmp=0"
	for i in $tx_rx; do
		if [ "$tmp" = "79" ]; then
			tx=$i
#			tx=`printf "%9i" $tx`
		fi
		if [ "$tmp" = "80" ]; then
			rx=$i
#			rx=`printf "%9i" $rx`
		fi
		let "tmp=$tmp+1"
	done
	echo "ge$g $on_off $state $auto  $flow  $speed   $duplex  $tx  $rx"
	echo "------------------------------------------------------------------"

	done	
}

ge_func() {
	if [ "$1" = "stat" ]; then
		if [ "$2" = "reset" ]; then
			echo "24" > /proc/sys/net/dslam_sw/sw0/statistics
			echo "24" > /proc/sys/net/dslam_sw/sw1/statistics
			echo "Statistics counters for ports ge0 and ge1 is reset"
		else
			echo ""
			print_ge_status_all
			echo ""
		fi
	else
		echo "Syntax error, after ge must be stat"
	fi
}

print_fe_status_all() {
	echo "------------------------------------------------------------------"
	echo "port   on/off  state config flow speed duplex TX packets RX packets"
	echo "------------------------------------------------------------------"
	for slot_ in `seq 0 3`; do
	for port_ in `seq 0 7`; do

	if [ ! -d "/sys/class/net/fe${slot_}${port_}/ms_private" ]; then
		break
	fi
	
	case "$slot_" in
		0) sw=0; sw_port=$((7-$port_));;
		1) sw=0; sw_port=$((15-$port_));;
		2) sw=1; sw_port=$((7-$port_));;
		3) sw=1; sw_port=$((15-$port_));;
	esac
	echo "${sw_port}" > /proc/sys/net/dslam_sw/sw${sw}/status
	status=`cat /proc/sys/net/dslam_sw/sw${sw}/status`
	let "tmp=0"
	for i in $status; do
		if [ "$tmp" = "1" ]; then
			flow=$i
			if [ "$flow" = "on" ]; then
				flow=" on"
			fi
		fi
		if [ "$tmp" = "2" ]; then
			duplex=$i
		fi
		if [ "$tmp" = "3" ]; then
			speed=$i
			if [ "$speed" = "10" ]; then
				speed="  10";
			fi
			if [ "$speed" = "100" ]; then
				speed=" 100";
			fi
		fi
		if [ "$tmp" = "4" ]; then
			state=$i
			if [ "$state" = "up" ]; then
				state=" online"
			else
				state="offline"
			fi
		fi
		if [ "$tmp" = "5" ]; then
			auto=$i
			if [ "$auto" = "auto" ]; then
				auto="  auto"
			else
				auto="manual"
			fi
		fi
		if [ "$tmp" = "6" ]; then
			on_off=$i
			if [ "$on_off" = "on" ]; then
				on_off="   on  "
			else
				on_off="  off  "
			fi
		fi
		let "tmp=$tmp+1"
	done
	tx_rx=`cat /proc/sys/net/dslam_sw/sw${sw}/statistics`
	let "tmp=0"
	pos=$((4+${sw_port}*3))
	for i in $tx_rx; do
		if [ "$tmp" = "$pos" ]; then
			tx=$i
#			tx=`printf "%9i" $tx`
		fi
		if [ "$tmp" = "$(($pos+1))" ]; then
			rx=$i
#			rx=`printf "%9i" $rx`
		fi
		let "tmp=$tmp+1"
	done
	echo "fe${slot_}${port_} $on_off $state $auto  $flow  $speed   $duplex  $tx  $rx"
	echo "------------------------------------------------------------------"

	done
	done	
}

fe_func() {
	if [ "$1" = "stat" ]; then
		if [ "$2" = "reset" ]; then
			for slot_ in `seq 0 3`; do
				for port_ in `seq 0 7`; do
					if [ ! -d "/sys/class/net/fe${slot_}${port_}/ms_private" ]; then
						break
					fi
					case "$slot_" in
						0) sw=0; sw_port=$((7-$port_));;
						1) sw=0; sw_port=$((15-$port_));;
						2) sw=1; sw_port=$((7-$port_));;
						3) sw=1; sw_port=$((15-$port_));;
					esac
					echo "${sw_port}" > /proc/sys/net/dslam_sw/sw${sw}/statistics
				done
			done
		else
			echo ""
			print_fe_status_all
			echo ""
		fi
	else
		echo "Syntax error, after ge must be stat"
	fi
}
dsl_func() {
	if [ "$1" = "stat" ]; then
		if [ "$2" = "reset" ]; then
			for tmp in `ls /sys/class/net/`; do
				if [ -d "/sys/class/net/$tmp/ms_private" ]; then
					echo "1" > /sys/class/net/$tmp/ms_private/statistics
				fi
			done
		else
			echo ""
			print_dsl_status_all
			echo ""
		fi
	else
		echo "Syntax error, after ge must be stat"
	fi
}

port_func() {
	prompt=":port"
	port_type=""
	tmp=`echo $1 | grep "dsl"`
	if [ "$tmp" != "" ]; then
		tmp=`expr substr $1 1 4``expr substr $1 6 6`
		if [ -d "/sys/class/net/$tmp/ms_private" ]; then
			port_type="dsl"
			port=$1
		else
			echo "Where are no such port!"
			return
		fi
	else
		tmp=`expr substr $1 1 3``expr substr $1 5 5`
		if [ -d "/sys/class/net/$tmp/ms_private" ]; then
			port_type="fe"
			port=$1
		else
			if [ "$1" = "ge0" ]; then
				port_type="ge"
				port=$1
			else
				if [ "$1" = "ge1" ]; then
					port_type="ge"
					port=$1
				else
					case "$1" in
						"ge")
							shift
							ge_func $*
						;;
						"fe")
							shift
							fe_func $*
						;;
						"dsl")
							shift
							dsl_func $*
						;;
						*)
							echo "Where are no such port!"
						;;
					esac
					return
				fi
			fi
		fi
	fi
	
	need_reconf=0
	case "$port_type" in
		"dsl")
			iface=`expr substr $1 1 4``expr substr $1 6 6`
			slot=`expr substr $iface 4 1`
			slot=$(($slot+2))
			pnum=`expr substr $iface 5 1`
			
			if [ "$2" != "" ]; then
				tcpam=""
				case "$2" in
					"stat")
						if [ "$3" = "reset" ]; then
							echo "1" > /sys/class/net/$iface/ms_private/statistics
							echo "Port $port statistics counters is reset"
						else
							print_dsl_status
							tcpam=""
						fi
					;;
					"rate")
						if [ "$3" != "" ]; then
							chk=`echo "$3" | grep '[^0-9]'`
							if [ ! -z "$chk" ]; then
								echo "Bad rate value"
							else
								tcpam=`cat /sys/class/net/$iface/ms_private/tcpam`
								case $tcpam in
									TCPAM4)
										tcpam=1
									;;
									TCPAM8)
										tcpam=2
									;;
									TCPAM16)
										tcpam=3
									;;
									TCPAM32)
										tcpam=4
									;;
									TCPAM64)
										tcpam=5
									;;
									TCPAM128)
										tcpam=6
									;;
								esac
								rate=$3
								check_tcpam_rate $tcpam $rate
								if [ "$?" = "0" ]; then
									echo "$rate" > /sys/class/net/$iface/ms_private/rate
									echo "kdb set sys_pcicfg_s000${slot}_${pnum}_rate=\"$rate\"" >> $tmp_config_file
									need_reconf=1
								fi
								tcpam=""
							fi
						else
							echo -en "\nPort $port rate: "
							cat /sys/class/net/$iface/ms_private/rate
							echo -e "\n"
						fi
					;;
					"tcpam")
						echo -en "\nPort $port tcpam: "
						cat /sys/class/net/$iface/ms_private/tcpam
						echo -e "\n"
        				;;
					"tcpam8")
						tcpam=2
					;;
					"tcpam16")
						tcpam=3
					;;
					"tcpam32")
						tcpam=4
						
					;;
					"tcpam64")
						tcpam=5
					;;
					"tcpam128")
						tcpam=6
					;;
					"annex")
						if [ "$3" = "" ]; then
							echo -en "\nPort $port annex: "
							cat /sys/class/net/$iface/ms_private/annex
							echo -e "\n"
						else
							if [ "$3" = "A" ]; then
								annex=0
								ann="A"
							elif [ "$3" = "B" ]; then
								annex=1
								ann="B"
							elif true; then
								annex="none"
							fi
							if [ "$annex" != "none" ]; then
								echo "$annex" > /sys/class/net/$iface/ms_private/annex
								echo "kdb set sys_pcicfg_s000${slot}_${pnum}_annex=\"$ann\"" >> $tmp_config_file
								need_reconf=1
							else
								echo -e "Annex must be A|B"
							fi
						fi
					;;
					"on")
						echo "1" > /sys/class/net/$iface/ms_private/on_off
						echo "kdb set sys_pcicfg_s000${slot}_${pnum}_on=\"1\"" >> $tmp_config_file
					;;
					"off")
						echo "0" > /sys/class/net/$iface/ms_private/on_off
						echo "kdb set sys_pcicfg_s000${slot}_${pnum}_on=\"0\"" >> $tmp_config_file
					;;
					"master")
						echo "1" > /sys/class/net/$iface/ms_private/mode
						echo "kdb set sys_pcicfg_s000${slot}_${pnum}_mode=\"master\"" >> $tmp_config_file
						need_reconf=1
					;;
					"slave")
						echo "0" > /sys/class/net/$iface/ms_private/mode
						echo "kdb set sys_pcicfg_s000${slot}_${pnum}_mode=\"slave\"" >> $tmp_config_file
						need_reconf=1
					;;
					"restart")
						need_reconf=1
					;;
					"pbo-normal")
						echo "0" > /sys/class/net/$iface/ms_private/pbo_mode
						echo "kdb set sys_pcicfg_s000${slot}_${pnum}_pbomode=\"0\"" >> $tmp_config_file
						need_reconf=1
					;;
					"pbo-forced")
						pbo_val=""
						if [ -z "$3" ]; then
							echo "PBO value is missing"
						fi
						chk=`echo $3 | grep '[^0-9]:'`
						if [ ! -z "$chk" ]; then
							echo "PBO value is missing"
						fi
						if [ "$3" != "" ]; then
							echo "$3" > /sys/class/net/$iface/ms_private/pbo_val
							echo "1" > /sys/class/net/$iface/ms_private/pbo_mode
							echo "kdb set sys_pcicfg_s000${slot}_${pnum}_pbomode=\"1\"" >> $tmp_config_file
							echo "kdb set sys_pcicfg_s000${slot}_${pnum}_pboval=\"$pbo_val\"" >> $tmp_config_file
							need_reconf=1
						fi
					;;
					"power")
						pwrsrc=`kdb get sys_pcicfg_s000${slot}_pwr_source`
						if [ "$pwrsrc" = "1" ]; then
							if [ "$pnum" = "0" ]; then
								pnum=0
							else
								if [ "$pnum" = "1" ]; then
									pnum=0
								else
									pnum=1
								fi
							fi
							case "$3" in
								"on")
									echo "1" > /sys/class/net/$iface/ms_private/pwron
									echo "kdb set sys_pcicfg_s000${slot}_pwr${pnum}_on=\"pwron\"" >> $tmp_config_file
								;;
								"off")
									echo "0" > /sys/class/net/$iface/ms_private/pwron
									echo "kdb set sys_pcicfg_s000${slot}_pwr${pnum}_on=\"pwroff\"" >> $tmp_config_file
								;;
								*)
									pwr=`cat /sys/class/net/$iface/ms_private/pwron`
									pwrunb=`cat /sys/class/net/$iface/ms_private/pwrunb`
									pwrovl=`cat /sys/class/net/$iface/ms_private/pwrovl`
									if [ "$pwrunb" = "1" ]; then
										pwrunb="unbalance"
									else
										pwrunb=""
									fi
									if [ "$pwrovl" = "1" ]; then
										pwrovl="overload"
									else
										pwrovl=""
									fi
									if [ "$pwr" = "1" ]; then
										pwr="on"
									else
										pwr="off"
									fi
									echo -e "\nPort $port power is $pwr $pwrunb $pwrovl\n"
								;;
							esac
						else
							echo -e "\nOn port $port no power source\n"
						fi
					;;
					*)
						echo "Syntax error after $port"
					;;
				esac
				if [ "$tcpam" != "" ]; then
					rate=`cat /sys/class/net/$iface/ms_private/rate`
					check_tcpam_rate $tcpam $rate
					if [ "$?" = "0" ]; then
						echo "$tcpam" > /sys/class/net/$iface/ms_private/tcpam
						case $tcpam in
							1)
								tcpam="tcpam4"
							;;
							2)
								tcpam="tcpam8"
							;;
							3)
								tcpam="tcpam16"
							;;
							4)
								tcpam="tcpam32"
							;;
							5)
								tcpam="tcpam64"
							;;
							6)
								tcpam="tcpam128"
							;;
						esac
						echo "kdb set sys_pcicfg_s000${slot}_${pnum}_code=\"$tcpam\"" >> $tmp_config_file
						need_reconf=1
					fi
				fi
				if [ "$need_reconf" = "1" ]; then
					echo "1" > /sys/class/net/$iface/ms_private/apply_cfg
				fi
			fi
		;;
		"ge")
			sw="sw"`expr substr $port 3 3`
			if [ "$2" != "" ]; then
				case "$2" in
					"auto")
						echo "24 1" > /proc/sys/net/dslam_sw/$sw/port_autoneg
						echo "$port autonegotigation is on"
						echo "kdb set sys_dslam_${port}_auto=1" >> $tmp_config_file
					;;
					"rate")
						if [ "$3" = "1000" ]; then
							echo "24 1000" > /proc/sys/net/dslam_sw/$sw/port_speed
							echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
							echo "$port rate is set to 1000 Mbps"
							echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
							echo "kdb set sys_dslam_${port}_rate=1000" >> $tmp_config_file
						else
							if [ "$3" = "100" ]; then
								echo "24 100" > /proc/sys/net/dslam_sw/$sw/port_speed
								echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
								echo "$port rate is set to 100 Mbps"
								echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
								echo "kdb set sys_dslam_${port}_rate=100" >> $tmp_config_file
							else
								if [ "$3" = "10" ]; then
									echo "24 10" > /proc/sys/net/dslam_sw/$sw/port_speed
									echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
									echo "$port rate is set to 10 Mbps"
									echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
									echo "kdb set sys_dslam_${port}_rate=10" >> $tmp_config_file
								else
									echo "24" > /proc/sys/net/dslam_sw/$sw/status
									status=`cat /proc/sys/net/dslam_sw/$sw/status`
									let "tmp=0"
									for i in $status; do
										if [ "$tmp" = "3" ]; then
											rate="$i"
										fi
										if [ "$tmp" = "5" ]; then
											config="$i"
											break
										fi
										let "tmp=$tmp+1"
									done
									echo "Port $port rate: $config $rate Mbps"
								fi
							fi
						fi
					;;
					"duplex")
						if [ "$3" = "full" ]; then
							echo "24 1" > /proc/sys/net/dslam_sw/$sw/port_duplex
							echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
							echo "$port fullduplex is set"
							echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
							echo "kdb set sys_dslam_${port}_duplex=1" >> $tmp_config_file
						else
							if [ "$3" = "half" ]; then

								echo "24" > /proc/sys/net/dslam_sw/$sw/status
								status=`cat /proc/sys/net/dslam_sw/$sw/status`
								let "tmp=0"
								for i in $status; do
									if [ "$tmp" = "3" ]; then
										rate="$i"
										break
									fi
									let "tmp=$tmp+1"
								done
								if [ "$rate" = "1000" ]; then
									echo -e "On rate 1000 Mbps dupex must be only full!"
								else
									echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_duplex
									echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
									echo "$port halfduplex is set"
									echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
									echo "kdb set sys_dslam_${port}_duplex=0" >> $tmp_config_file
								fi
							else
								echo "24" > /proc/sys/net/dslam_sw/$sw/status
								status=`cat /proc/sys/net/dslam_sw/$sw/status`
								let "tmp=0"
								for i in $status; do
									if [ "$tmp" = "2" ]; then
										echo "Port $port duplex: $i"
										break
									fi
									let "tmp=$tmp+1"
								done
							fi
						fi
					;;
					"flow")
						if [ "$3" = "on" ]; then
							echo "24 1" > /proc/sys/net/dslam_sw/$sw/port_flowctrl
							echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
							echo "$port flow control is on"
							echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
							echo "kdb set sys_dslam_${port}_flow=1" >> $tmp_config_file
						else
							if [ "$3" = "off" ]; then
								echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_flowctrl
								echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
								echo "$port flow control is off"
								echo "kdb set sys_dslam_${port}_auto=0" >> $tmp_config_file
								echo "kdb set sys_dslam_${port}_flow=0" >> $tmp_config_file
							else
								echo "24" > /proc/sys/net/dslam_sw/$sw/status
								status=`cat /proc/sys/net/dslam_sw/$sw/status`
								let "tmp=0"
								for i in $status; do
									if [ "$tmp" = "1" ]; then
										echo "Port $port flow control: $i"
										break
									fi
									let "tmp=$tmp+1"
								done
							fi
						fi
					;;
					"on")
						echo "24 1" > /proc/sys/net/dslam_sw/$sw/port_on_off
						echo "Port $port is on"
						echo "kdb set sys_dslam_${port}_on=1" >> $tmp_config_file
					;;
					"off")
						echo "24 0" > /proc/sys/net/dslam_sw/$sw/port_on_off
						echo "Port $port is off"
						echo "kdb set sys_dslam_${port}_on=0" >> $tmp_config_file
					;;
					"stat")
						if [ "$3" = "reset" ]; then
							echo "24" > /proc/sys/net/dslam_sw/$sw/statistics
							echo "Port $port statistics counters is reset"
						else
							print_ge_fe_status sw`expr substr $port 3 1` 24
						fi
					;;
					*)
					;;
				esac
			fi
		;;
		"fe")
			iface=`expr substr $1 1 3``expr substr $1 5 5`
			slot=`expr substr $iface 3 1`
			pnum=`expr substr $iface 4 1`
			case $slot in
				0) sw=sw0; sw_port=$((7-$pnum));;
				1) sw=sw0; sw_port=$(($((7-$pnum))+8));;
				2) sw=sw1; sw_port=$((7-$pnum));;
				3) sw=sw1; sw_port=$(($((7-$pnum))+8));;
			esac
#			echo "sw=$sw sw_port=$sw_port"
			if [ "$2" != "" ]; then
				case "$2" in
					"auto")
						echo "$sw_port 1" > /proc/sys/net/dslam_sw/$sw/port_autoneg
						echo "$port autonegotigation is on"
						echo "kdb set sys_dslam_${iface}_auto=1" >> $tmp_config_file
					;;
					"rate")
						if [ "$3" = "100" ]; then
							echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
							echo "$sw_port 100" > /proc/sys/net/dslam_sw/$sw/port_speed
							echo "$port rate is set to 100 Mbps"
							echo "kdb set sys_dslam_${iface}_auto=0" >> $tmp_config_file
							echo "kdb set sys_dslam_${iface}_rate=100" >> $tmp_config_file
						else
							if [ "$3" = "10" ]; then
								echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
								echo "$sw_port 10" > /proc/sys/net/dslam_sw/$sw/port_speed
								echo "$port rate is set to 10 Mbps"
								echo "kdb set sys_dslam_${iface}_auto=0" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_rate=10" >> $tmp_config_file
							else
								echo "$sw_port" > /proc/sys/net/dslam_sw/$sw/status
								status=`cat /proc/sys/net/dslam_sw/$sw/status`
								let "tmp=0"
								for i in $status; do
									if [ "$tmp" = "3" ]; then
										rate="$i"
									fi
									if [ "$tmp" = "5" ]; then
										config="$i"
										break
									fi
									let "tmp=$tmp+1"
								done
								echo "Port $port rate: $config $rate Mbps"
							fi
						fi
					;;
					"duplex")
						if [ "$3" = "full" ]; then
							echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
							echo "$sw_port 1" > /proc/sys/net/dslam_sw/$sw/port_duplex
							echo "$port fullduplex is set"
							echo "kdb set sys_dslam_${iface}_auto=0" >> $tmp_config_file
							echo "kdb set sys_dslam_${iface}_duplex=1" >> $tmp_config_file
						else
							if [ "$3" = "half" ]; then
								echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
								echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_duplex
								echo "$port halfduplex is set"
								echo "kdb set sys_dslam_${iface}_auto=0" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_duplex=0" >> $tmp_config_file
							else
								echo "$sw_port" > /proc/sys/net/dslam_sw/$sw/status
								status=`cat /proc/sys/net/dslam_sw/$sw/status`
								let "tmp=0"
								for i in $status; do
									if [ "$tmp" = "2" ]; then
										echo "Port $port duplex: $i"
										break
									fi
									let "tmp=$tmp+1"
								done
							fi
						fi
					;;
					"flow")
						if [ "$3" = "on" ]; then
							echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
							echo "$sw_port 1" > /proc/sys/net/dslam_sw/$sw/port_flowctrl
							echo "$port flow control is on"
							echo "kdb set sys_dslam_${iface}_auto=0" >> $tmp_config_file
							echo "kdb set sys_dslam_${iface}_flow=1" >> $tmp_config_file
						else
							if [ "$3" = "off" ]; then
								echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_autoneg
								echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_flowctrl
								echo "$port flow control is off"
								echo "kdb set sys_dslam_${iface}_auto=0" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_flow=0" >> $tmp_config_file
							else
								echo "$sw_port" > /proc/sys/net/dslam_sw/$sw/status
								status=`cat /proc/sys/net/dslam_sw/$sw/status`
								let "tmp=0"
								for i in $status; do
									if [ "$tmp" = "1" ]; then
										echo "Port $port flow control: $i"
										break
									fi
									let "tmp=$tmp+1"
								done
							fi
						fi
					;;
					"on")
						echo "$sw_port 1" > /proc/sys/net/dslam_sw/$sw/port_on_off
						echo "Port $port is on"
						echo "kdb set sys_dslam_${iface}_on=1" >> $tmp_config_file
					;;
					"off")
						echo "$sw_port 0" > /proc/sys/net/dslam_sw/$sw/port_on_off
						echo "Port $port is off"
						echo "kdb set sys_dslam_${iface}_on=0" >> $tmp_config_file
					;;
					"stat")
						if [ "$3" = "reset" ]; then
							echo "$sw_port" > /proc/sys/net/dslam_sw/$sw/statistics
							echo "Port $port statistics counters is reset"
						else
							print_ge_fe_status $sw $sw_port $iface
						fi
					;;
					"power")
						pwr_source=`cat /sys/class/net/${iface}/ms_private/pwr_source`
						if [ "$pwr_source" != "1" ]; then
							echo "This interface don't have power module!"
							return
						fi
						case "$3" in
							"on")
								echo "1" > /sys/class/net/${iface}/ms_private/pwr_enable
								echo "PoE on port $port is on!"
								echo "kdb set sys_dslam_${iface}_pwr_on=1" >> $tmp_config_file
							;;
							"off")
								echo "0" > /sys/class/net/${iface}/ms_private/pwr_enable
								echo "PoE on port $port is off!"
								echo "kdb set sys_dslam_${iface}_pwr_on=0" >> $tmp_config_file
							;;
							"")
								pwr=`cat /sys/class/net/${iface}/ms_private/pwr_enable`
								if [ "$pwr" = "1" ]; then
									echo "PoE on port $port is on!"
								else
									echo "PoE on port $port is off!"
								fi
							;;
							*)
								echo "Syntax error, usage: power on|off"
							;;
						esac
					;;
					"poe_config")
						pwr_source=`cat /sys/class/net/${iface}/ms_private/pwr_source`
						if [ "$pwr_source" != "1" ]; then
							echo "This interface don't have power module!"
							return
						fi
						case "$3" in
							"auto")
								poe_plus=0
								if [ "$4" == "poe+" -o "$4" == "1" ]; then
								    poe_plus=1
								else
									if [ "$4" != "" ]; then
										echo "Sytax error, usage: poe_config auto [poe+]"
										return
									fi
								fi
								echo "1 ${poe_plus}" > /sys/class/net/${iface}/ms_private/config
								echo "PoE on port $port is set to auto!"
								echo "kdb set sys_dslam_${iface}_pwr_auto=1" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_pwr_poe_plus=${poe_plus}" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_pwr_class=''" >> $tmp_config_file
							;;
							"class")
								poe_class=""
								poe_plus=0
								case "$4" in
								# 0,3,4 is equal...
									0 | 1 | 2 | 3 | 4) poe_class=$4;;
									5 | "poe+")
									    poe_class=5
									    poe_plus=1
									;;
									*)
										echo "Syntax error, usage: poe_config class 0|1|2|3|4|poe+"
										return
									;;
								esac
								echo "0 $poe_class" > /sys/class/net/${iface}/ms_private/config
								echo "PoE on port $port is set to class $4"
								echo "kdb set sys_dslam_${iface}_pwr_class=${poe_class}" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_pwr_auto=0" >> $tmp_config_file
								echo "kdb set sys_dslam_${iface}_pwr_poe_plus=${poe_plus}" >> $tmp_config_file
							;;
							"")
								eval `cat /sys/class/net/${iface}/ms_private/config`
								if [ "$auto" == "1" ]; then
									if [ "$poe_plus" == "1" ]; then
										echo "Auto with PoE+"
									else
										echo "Auto without PoE+"
									fi
								else
									case "$current" in
										96) class=1;;
										169) class=2;;
										374) class=0;;
										643) class="poe+";;
										*) class="unknown";;
									esac
									echo "Class - $class (${current})"
								fi
							;;
							*)
								echo -e "Syntax error, usage:\n\tpoe_config auto\n\tpoe_config class 0|1|2|3|4|poe+"
								echo -e "\tpoe_config current <4-816 mA> [auto_off] [poe+]"
							;;								
						esac
					;;
					*);;
				esac
			fi		
		;;
	esac
}
