#!/bin/sh

. /etc/cli/services_vlan
. /etc/cli/services_cos

# $1 - string, $2 num of spaces, result in $ret
append_spaces() {
	let "ii=0"
	ret="$1"
	while [ "$ii" != "$2" ]; do
		ret=" $ret"
		let "ii=$ii+1"
	done
}

# $1 - group, result in $ret
group_ports() {
	case "$1" in
		"group0")
			g_ports=""
			eval `cat /proc/sys/net/dslam_sw/sw0/trunk_port_id`
			if [ "$p0" != "0" ]; then
				if [ -d "/sys/class/net/fe07/ms_private" ]; then
					g_ports="fe0/7"
				else
					g_ports="dsl0/0"
				fi
			fi
			if [ "$p1" != "0" ]; then
				if [ -d "/sys/class/net/fe06/ms_private" ]; then
					g_ports=$g_ports" fe0/6"
				else
					g_ports=$g_ports" dsl0/1"
				fi
			fi
			if [ "$p2" != "0" ]; then
				if [ -d "/sys/class/net/fe05/ms_private" ]; then
					g_ports=$g_ports" fe0/5"
				else
					g_ports=$g_ports" dsl0/2"
				fi
			fi
			if [ "$p3" != "0" ]; then
				if [ -d "/sys/class/net/fe04/ms_private" ]; then
					g_ports=$g_ports" fe0/4"
				else
					g_ports=$g_ports" dsl0/3"
				fi
			fi
		;;
		"group1")
			g_ports=""
			eval `cat /proc/sys/net/dslam_sw/sw0/trunk_port_id`
			if [ "$p4" != "0" ]; then
				g_ports="fe0/3"
			fi
			if [ "$p5" != "0" ]; then
				g_ports=$g_ports" fe0/2"
			fi
			if [ "$p6" != "0" ]; then
				g_ports=$g_ports" fe0/1"
			fi
			if [ "$p7" != "0" ]; then
				g_ports=$g_ports" fe0/0"
			fi
		;;
		"group2")
			g_ports=""
			eval `cat /proc/sys/net/dslam_sw/sw1/trunk_port_id`
			if [ "$p0" != "0" ]; then
				if [ -d "/sys/class/net/fe27/ms_private" ]; then
					g_ports="fe2/7"
				else
					g_ports="dsl2/0"
				fi
			fi
			if [ "$p1" != "0" ]; then
				if [ -d "/sys/class/net/fe26/ms_private" ]; then
					g_ports=$g_ports" fe2/6"
				else
					g_ports=$g_ports" dsl2/1"
				fi
			fi
			if [ "$p2" != "0" ]; then
				if [ -d "/sys/class/net/fe25/ms_private" ]; then
					g_ports=$g_ports" fe2/5"
				else
					g_ports=$g_ports" dsl2/2"
				fi
			fi
			if [ "$p3" != "0" ]; then
				if [ -d "/sys/class/net/fe24/ms_private" ]; then
					g_ports=$g_ports" fe2/4"
				else
					g_ports=$g_ports" dsl2/3"
				fi
			fi
		;;
		"group3")
			g_ports=""
			eval `cat /proc/sys/net/dslam_sw/sw1/trunk_port_id`
			if [ "$p4" != "0" ]; then
				g_ports="fe2/3"
			fi
			if [ "$p5" != "0" ]; then
				g_ports=$g_ports" fe2/2"
			fi
			if [ "$p6" != "0" ]; then
				g_ports=$g_ports" fe2/1"
			fi
			if [ "$p7" != "0" ]; then
				g_ports=$g_ports" fe2/0"
			fi
		;;
	esac
	if [ "$g_ports" = "" ]; then
		ret="none"
	else
		ret=`echo $g_ports`
	fi
}

link_aggregation_group_func() {
	group=$1
	case "$group" in
		"group0" | "group1")
			sw="sw0"
		;;
		"group2" | "group3")
			sw="sw1"
		;;
	esac
	shift
	case "$1" in
		"algorithm")
			shift
			case "$1" in
				"MS" | "ms" | "1")
					echo "1" > /proc/sys/net/dslam_sw/${sw}/trunk_hash_alg
					echo "kdb set sys_dslam_link_aggregation_${sw}_algorithm=\"1\"" >> $tmp_config_file
#					echo -e "\n$group hash algorithm is set to MAC source\n"
				;;
				"MD" | "md" | "2")
					echo "2" > /proc/sys/net/dslam_sw/${sw}/trunk_hash_alg
					echo "kdb set sys_dslam_link_aggregation_${sw}_algorithm=\"2\"" >> $tmp_config_file
#					echo -e "\n$group hash algorithm is set to MAC dest\n"
				;;
				"MSD" | "msd" | "3")
					echo "3" > /proc/sys/net/dslam_sw/${sw}/trunk_hash_alg
					echo "kdb set sys_dslam_link_aggregation_${sw}_algorithm=\"3\"" >> $tmp_config_file
#					echo -e "\n$group hash algorithm is set to MAC source-dest\n"
				;;
				"")
					alg=`cat /proc/sys/net/dslam_sw/${sw}/trunk_hash_alg`
					case "$alg" in
						0)
							alg="PB"
						;;
						1)
							alg="MS"
						;;
						2)
							alg="MD"
						;;
						3)
							alg="MSD"
						;;
						*)
							alg="??"
						;;
					esac
					echo -e "\n$group hash algorithm is $alg\n"
				;;
				*)
					echo "Syntax error"
				;;
			esac
		;;
		"joined")
			shift
			if [ "$1" = "" ]; then
				group_ports $group
				g_ports="$ret"
				echo "$group ports: $g_ports"
			else
				let "cnt=0"
				lap0=0
				lap1=0
				lap2=0
				lap3=0

				print_error_msg() {
					echo -n "In LA $group can be this ports: "
					case "$group" in
						group0) echo "dsl0/0 dsl0/1 dsl0/2 dsl0/3 or fe0/4 fe0/5 fe0/6 fe0/7";;
						group1) echo "fe0/0 fe0/1 fe0/2 fe0/3";;
						group2) echo "dsl2/0 dsl2/1 dsl2/2 dsl2/3 or fe2/4 fe2/5 fe2/6 fe2/7";;
						group3) echo "fe2/0 fe2/1 fe2/2 fe2/3";;
					esac
				}
				tmp="$*"
				case "$group" in
					group0)
						for i in $*; do
							if [ "$i" != "dsl0/0" -a "$i" != "dsl0/1" -a "$i" != "dsl0/2" -a "$i" != "dsl0/3" ]; then
								tmp=""
								break
							fi
						done
						if [ "$tmp" = "" ]; then
							tmp="$*"
							for i in $*; do
								if [ "$i" != "fe0/4" -a "$i" != "fe0/5" -a "$i" != "fe0/6" -a "$i" != "fe0/7" ]; then
									tmp=""
									break
								fi
							done
						fi
					;;
					group1)
						for i in $*; do
							if [ "$i" != "fe0/0" -a "$i" != "fe0/1" -a "$i" != "fe0/2" -a "$i" != "fe0/3" ]; then
								tmp=""
								break
							fi
						done
					;;
					group2)
						for i in $*; do
							if [ "$i" != "dsl2/0" -a "$i" != "dsl2/1" -a "$i" != "dsl2/2" -a "$i" != "dsl2/3" ]; then
								tmp=""
								break
							fi
						done
						if [ "$tmp" = "" ]; then
							tmp="$*"
							for i in $*; do
								if [ "$i" != "fe2/4" -a "$i" != "fe2/5" -a "$i" != "fe2/6" -a "$i" != "fe2/7" ]; then
									tmp=""
									break
								fi
							done
						fi
					;;
					group3)
						for i in $*; do
							if [ "$i" != "fe2/0" -a "$i" != "fe2/1" -a "$i" != "fe2/2" -a "$i" != "fe2/3" ]; then
								tmp=""
								break
							fi
						done
					;;
				esac
				if [ "$tmp" = "" -a "$1" != "none" ]; then
					print_error_msg
					return
				fi
				for i in $*; do
					case "$i" in
						dsl0/0 | fe0/7) lap0=1;;
						dsl0/1 | fe0/6) lap1=1;;
						dsl0/2 | fe0/5) lap2=1;;
						dsl0/3 | fe0/4) lap3=1;;
						fe0/0) lap3=1;;
						fe0/1) lap2=1;;
						fe0/2) lap1=1;;
						fe0/3) lap0=1;;
						dsl2/0 | fe2/7) lap0=1;;
						dsl2/1 | fe2/6) lap1=1;;
						dsl2/2 | fe2/5) lap2=1;;
						dsl2/3 | fe2/4) lap3=1;;
						fe2/0) lap3=1;;
						fe2/1) lap4=1;;
						fe2/2) lap1=1;;
						fe2/3) lap0=1;;
						none) let "cnt=0"; break;;
					esac
					let "cnt=$cnt+1"
				done
				echo "cnt=$cnt $lap0$lap1$lap2$lap3"

				case "$cnt" in
					0)
						case "$group" in
							"group0" | "group2")
								echo "0 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "1 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "2 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "3 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
							;;
							"group1" | "group3")
								echo "4 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "5 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "6 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "7 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
							;;
						esac
					;;
					2)
						case "$group" in
							"group0" | "group2")
								val=3
								for i in 0 1 2 3; do
									eval "tmp=\${lap$i}"
									if [ "$tmp" = "1" ]; then
										echo "$i $val" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
										val=12
									else
										echo "$i 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
									fi
								done
							;;
							"group1" | "group3")
								val=3
								for i in 0 1 2 3; do
									eval "tmp=\${lap$i}"
									if [ "$tmp" = "1" ]; then
										echo "$(($i+4)) $val" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
										val=12
									else
										echo "$(($i+4)) 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
									fi
								done
							;;
						esac
					;;
					3)
						case "$group" in
							"group0" | "group2")
								val=1
								for i in 0 1 2 3; do
									eval "tmp=\${lap$i}"
									if [ "$tmp" = "1" ]; then
										echo "$i $val" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
										let "val=$val*2"
										if [ "$val" = "4" ]; then
											let "val=12"
										fi
									else
										echo "$i 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
									fi
								done
							;;
							"group1" | "group3")
								val=1
								for i in 0 1 2 3; do
									eval "tmp=\${lap$i}"
									if [ "$tmp" = "1" ]; then
										echo "$(($i+4)) $val" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
										let "val=$val*2"
										if [ "$val" = "4" ]; then
											let "val=12"
										fi
									else
										echo "$(($i+4)) 0" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
									fi
								done
							;;
						esac
					;;
					4)
						case "$group" in
							"group0" | "group2")
								echo "0 1" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "1 2" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "2 4" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "3 8" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
							;;
							"group1" | "group3")
								echo "4 1" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "5 2" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "6 4" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
								echo "7 8" > /proc/sys/net/dslam_sw/${sw}/trunk_port_id
							;;
						esac
					;;
					*)
						echo "In link aggregation group must be from 2 to 4 ports!"
						return
					;;
				esac
				group_ports $group
				g_ports="$ret"
				echo "kdb set sys_dslam_link_aggregation_${group}_ports=\"$g_ports\"" >> $tmp_config_file
			fi
		;;
		"show")
			case "$group" in
				"group0")
					alg=`cat /proc/sys/net/dslam_sw/sw0/trunk_hash_alg`
				;;
				"group1")
					alg=`cat /proc/sys/net/dslam_sw/sw0/trunk_hash_alg`
				;;
				"group2")
					alg=`cat /proc/sys/net/dslam_sw/sw1/trunk_hash_alg`
				;;
				"group3")
					alg=`cat /proc/sys/net/dslam_sw/sw1/trunk_hash_alg`
				;;
			esac
			group_ports $group
			g_ports=$ret
			case "$alg" in
				0) alg="PB";;
				1) alg="MS";;
				2) alg="MD";;
				3) alg="MSD";;
				*) alg="??";;
			esac
			echo -e "\nLA Group     "`expr substr $group 6 1`
			echo -e "Type         static"
			echo -e "Algorithm    $alg"
			echo -e "Ports        $g_ports"
# TODO: тут надо вычислить какие из портов активны в данный момент
#			echo -e "Active ports $g_active_ports"
		;;
		"")
		;;
		*)
			echo "Syntax error"
		;;
	esac
	
}

link_aggregation_func() {
	prompt=":services:link_aggregation"
	
	if [ "$group" != "" ]; then
		link_aggregation_group_func $group $*
	else

	case "$1" in
		"show")
			sw0_alg=`cat /proc/sys/net/dslam_sw/sw0/trunk_hash_alg`
			sw1_alg=`cat /proc/sys/net/dslam_sw/sw1/trunk_hash_alg`
			case "$sw0_alg" in
				0)
					sw0_alg="  PB  "
				;;
				1)
					sw0_alg="  MS  "
				;;
				2)
					sw0_alg="  MD  "
				;;
				3)
					sw0_alg="  MSD "
				;;
				*)
					sw0_alg="  ??  "
				;;
			esac
			case "$sw1_alg" in
				0)
					sw1_alg="  PB  "
				;;
				1)
					sw1_alg="  MS  "
				;;
				2)
					sw1_alg="  MD  "
				;;
				3)
					sw1_alg="  MSD "
				;;
				*)
					sw1_alg="  ??  "
				;;
			esac

			group_ports group0
			g0_ports="$ret"
			if [ "$g0_ports" = "none" ]; then
				g0="disable"
				g0_ports="       "
			else
				g0=" enable"
				g0_ports="$ret"
			fi
			group_ports group1
			g1_ports="$ret"
			if [ "$g1_ports" = "none" ]; then
				g1="disable"
				g1_ports="       "
			else
				g1=" enable"
				g1_ports="$ret"
			fi
			group_ports group2
			g2_ports="$ret"
			if [ "$g2_ports" = "none" ]; then
				g2="disable"
				g2_ports="       "
			else
				g2=" enable"
				g2_ports="$ret"
			fi
			group_ports group3
			g3_ports="$ret"
			if [ "$g3_ports" = "none" ]; then
				g3="disable"
				g3_ports="       "
			else
				g3=" enable"
				g3_ports="$ret"
			fi
			
			echo "--------------------------------------------------------------------"
			echo "Group num | Group type | Algorithm | Group state | Port of the group"
			echo "--------------------------------------------------------------------"
			echo "    0     |   static   |  $sw0_alg   |   $g0   | $g0_ports"
			echo "--------------------------------------------------------------------"
			echo "    1     |   static   |  $sw0_alg   |   $g1   | $g1_ports"
			echo "--------------------------------------------------------------------"
			echo "    2     |   static   |  $sw1_alg   |   $g2   | $g2_ports"
			echo "--------------------------------------------------------------------"
			echo "    3     |   static   |  $sw1_alg   |   $g3   | $g3_ports"
			echo "--------------------------------------------------------------------"
			if [ "$p0" = "0" ]; then
				p0=""
			fi
			if [ "$p1" = "0" ]; then
				p1=""
			fi
			if [ "$p2" = "0" ]; then
				p2=""
			fi
			if [ "$p3" = "0" ]; then
				p3=""
			fi
		;;
		"group0" | "group1" | "group2" | "group3")
			link_aggregation_group_func $*
		;;
		"")
		;;
		*)
			echo "Syntax error"
		;;
	esac
	
	fi
}

mirroring_group_show() {
	i=$1
	local port
	local slot
	echo "----------------------------"
	echo "Group$i"
	echo "----------------------------"
	echo -n "State             - "
	alg=`cat /proc/sys/net/dslam_sw/sw$i/mirror_alg`
	case $alg in
		"0") alg="none";;
		"1") alg="rx";;
		"2") alg="tx";;
		"3") alg="rx/tx";;
		*) alg="none";;
	esac
	if [ "$alg" = "none" ]; then
		echo "disable"
	else
		echo "enable"
	fi
	s_ports=`cat /proc/sys/net/dslam_sw/sw$i/mirror_source`
	s_ports_str=""
	for p in $s_ports; do
		if [ "$p" = "24" ]; then
			s_ports_str="$s_ports_str ge$i"
		fi
		if [ "$p" -lt "8" ]; then
			if [ "$i" = "0" ]; then
				slot="0"
			else
				slot="2"
			fi
			port="$p"
		else
			if [ "$i" = "0" ]; then
				slot="1"
			else
				slot="3"
			fi
			port="$(($p-8))"
		fi
		if [ -d "/sys/class/net/dsl${slot}${port}/ms_private" ]; then
			s_ports_str="$s_ports_str dsl${slot}/${port}"
		else
			if [ -d "/sys/class/net/fe${slot}$((7-${port}))/ms_private" ]; then
				s_ports_str="$s_ports_str fe${slot}/$((7-${port}))"
			fi
		fi
	done
	if [ "$s_ports_str" = "" ]; then
		s_ports_str="none"
	fi
	s_ports_str=`echo $s_ports_str`
	echo "Source ports      - "$s_ports_str
	d_ports=`cat /proc/sys/net/dslam_sw/sw$i/mirror_dest`
	d_ports_str=""
	for p in $d_ports; do
		if [ "$p" = "24" ]; then
			d_ports_str="$d_ports_str ge$i"
		fi
		if [ "$p" -lt "8" ]; then
			if [ "$i" = "0" ]; then
				slot="0"
			else
				slot="2"
			fi
			port="$p"
		else
			if [ "$i" = "0" ]; then
				slot="1"
			else
				slot="3"
			fi
			port="$(($p-8))"
		fi
		if [ -d "/sys/class/net/dsl${slot}${port}/ms_private" ]; then
			type="dsl"
			d_ports_str="$d_ports_str dsl${slot}/${port}"
		else
			if [ -d "/sys/class/net/fe${slot}$((7-${port}))/ms_private" ]; then
				type="fe"
				d_ports_str="$d_ports_str fe${slot}/$((7-${port}))"
			else
				echo "unknown port fe${slot}/$((7-${port}))"
			fi
		fi
	done
	if [ "$d_ports_str" = "" ]; then
		d_ports_str="none"
	fi
	d_ports_str=`echo $d_ports_str`
	echo "Destination ports - "$d_ports_str
	echo "Algorithm         - $alg"
	echo "----------------------------"
}
mirroring_group_func() {
	group=$1
	case "$group" in
		"group0")
			sw="sw0"
		;;
		"group1")
			sw="sw1"
		;;
	esac
	shift
	case "$1" in
		"source")
			shift
			if [ "$1" = "" ]; then
				mirroring_group_show `expr substr $sw 3 1` > /tmp/temp_file
				cat /tmp/temp_file | grep "Source ports"
				rm -f /tmp/temp_file
				return
			fi
			if [ "$1" = "none" ]; then
				echo "none" > /proc/sys/net/dslam_sw/${sw}/mirror_source
				echo "Source ports = none"
				return
			fi
			str=""
			while [ ! -z "$1" ]; do
				case $1 in
					"ge0")
						if [ "$sw" = "sw0" ]; then
							str="$str 24"
						else
							echo "Port ge0 can be only in group0!"
							return
						fi
					;;
					"ge1")
						if [ "$sw" = "sw1" ]; then
							str="$str 24"
						else
							echo "Port ge1 can be only in group1!"
							return
						fi
					;;
					"dsl"*)
						slot_=`expr substr $1 4 1`
						port_=`expr substr $1 6 1`
						if [ ! -d "/sys/class/net/dsl${slot_}${port_}/ms_private" ]; then
							echo "Where are no port $1!"
							return
						fi
						if [ "$sw" = "sw0" ]; then
							if [ "$slot_" =  "0" ]; then
								str="$str $port_"
							else
								if [ "$slot_" =  "1" ]; then
									str="$str "$(($port_+8))
								else
									echo "In group0 can be only ports from slot 0 and slot 1!"
									return
								fi
							fi
						elif [ "$sw" = "sw1" ]; then
							if [ "$slot_" =  "2" ]; then
								str="$str $port_"
							else
								if [ "$slot_" =  "3" ]; then
									str="$str "$(($port_+8))
								else
									echo "In group1 can be only ports from slot 2 and slot 3!"
									return
								fi
							fi
						fi
					;;
					"fe"*)
						slot_=`expr substr $1 3 1`
						port_=`expr substr $1 5 1`
						if [ ! -d "/sys/class/net/fe${slot_}${port_}/ms_private" ]; then
							echo "Where are no port $1!"
							return
						fi
						if [ "$sw" = "sw0" ]; then
							if [ "$slot_" =  "0" ]; then
								str="$str $((7-$port_))"
							else
								if [ "$slot_" =  "1" ]; then
									str="$str "$((15-$port_))
								else
									echo "In group0 can be only ports from slot 0 and slot 1!"
									return
								fi
							fi
						elif [ "$sw" = "sw1" ]; then
							if [ "$slot_" =  "2" ]; then
								str="$str $((7-$port_))"
							else
								if [ "$slot_" =  "3" ]; then
									str="$str "$((15-$port_))
								else
									echo "In group1 can be only ports from slot 2 and slot 3!"
									return
								fi
							fi
						fi
					;;
					*)
						echo "Bad port $1!"
						return
					;;
				esac
				shift
			done
			str=`echo $str`
			echo "Source ports = $str"
			if [ "$str" = "" ]; then str="none"; fi
			echo "$str" > /proc/sys/net/dslam_sw/${sw}/mirror_source
		;;
		"dest")
			shift
			if [ "$1" = "" ]; then
				mirroring_group_show `expr substr $sw 3 1` > /tmp/temp_file
				cat /tmp/temp_file | grep "Destination ports"
				rm -f /tmp/temp_file
				return
			fi
			if [ "$1" = "none" ]; then
				echo "none" > /proc/sys/net/dslam_sw/${sw}/mirror_dest
				return
			fi
			str=""
			while [ ! -z "$1" ]; do
				case $1 in
					"ge0")
						if [ "$sw" = "sw0" ]; then
							str="$str 24"
						else
							echo "Port ge0 can be only in group0!"
							return
						fi
					;;
					"ge1")
						if [ "$sw" = "sw1" ]; then
							str="$str 24"
						else
							echo "Port ge1 can be only in group1!"
							return
						fi
					;;
					"dsl"*)
						slot_=`expr substr $1 4 1`
						port_=`expr substr $1 6 1`
						if [ ! -d "/sys/class/net/dsl${slot_}${port_}/ms_private" ]; then
							echo "Where are no port $1!"
							return
						fi
						if [ "$sw" = "sw0" ]; then
							if [ "$slot_" =  "0" ]; then
								str="$str $port_"
							else
								if [ "$slot_" =  "1" ]; then
									str="$str "$(($port_+8))
								else
									echo "In group0 can be only ports from slot 0 and slot 1!"
									return
								fi
							fi
						elif [ "$sw" = "sw1" ]; then
							if [ "$slot_" =  "2" ]; then
								str="$str $port_"
							else
								if [ "$slot_" =  "3" ]; then
									str="$str "$(($port_+8))
								else
									echo "In group1 can be only ports from slot 2 and slot 3!"
									return
								fi
							fi
						fi
					;;
					"fe"*)
						slot_=`expr substr $1 3 1`
						port_=`expr substr $1 5 1`
						if [ ! -d "/sys/class/net/fe${slot_}${port_}/ms_private" ]; then
							echo "Bad port $1!"
							return
						fi
						if [ "$sw" = "sw0" ]; then
							if [ "$slot_" =  "0" ]; then
								str="$str $((7-$port_))"
							else
								if [ "$slot_" =  "1" ]; then
									str="$str "$((15-$port_))
								else
									echo "Bad port $1!"
									return
								fi
							fi
						elif [ "$sw" = "sw1" ]; then
							if [ "$slot_" =  "2" ]; then
								str="$str $((7-$port_))"
							else
								if [ "$slot_" =  "3" ]; then
									str="$str "$((15-$port_))
								else
									echo "Bad port $1!"
									return
								fi
							fi
						else
							echo "Bad port $1!"
							return
						fi
					;;
					*)
						echo "Bad port $1!"
						return
					;;
				esac
				shift
			done
			str=`echo $str`
			echo "Dest ports = $str"
			if [ "$str" = "" ]; then str="none"; fi
			echo "$str" > /proc/sys/net/dslam_sw/${sw}/mirror_dest
		;;
		"show")
			mirroring_group_show `expr substr $sw 3 1`
		;;
		"enable" | "on")
			echo "3" > /proc/sys/net/dslam_sw/${sw}/mirror_alg
		;;
		"disable" | "off")
			echo "0" > /proc/sys/net/dslam_sw/${sw}/mirror_alg
		;;
		"algorithm" | "alg")
			shift
			case $1 in
				"rx" | "1")
					echo "1" > /proc/sys/net/dslam_sw/${sw}/mirror_alg
				;;
				"tx" | "2")
					echo "2" > /proc/sys/net/dslam_sw/${sw}/mirror_alg
				;;
				"both" | "rx/tx" | "rxtx" | "3")
					echo "3" > /proc/sys/net/dslam_sw/${sw}/mirror_alg
				;;
				"")
					alg=`cat /proc/sys/net/dslam_sw/${sw}/mirror_alg`
					case $alg in
						"0") alg="none";;
						"1") alg="rx";;
						"2") alg="tx";;
						"3") alg="rx/tx";;
					esac
					echo "Algorithm is $alg"
				;;
				*)
					echo "Syntax error"
				;;
			esac
		;;
		"")
		;;
		*)
			echo "Syntax error"
		;;
	esac
}

mirroring_func() {
	prompt=":services:mirroring"

	if [ "$group" != "" ]; then
		mirroring_group_func $group $*
	else

	case "$1" in
		"show")
			for i in 0 1; do
				mirroring_group_show $i
			done
		;;
		"group0" | "group1")
			mirroring_group_func $*
		;;
		"")
		;;
		*)
			echo "Syntax error"
		;;
	esac
	
	fi
}

services_func() {
	case "$1" in
		"link_aggregation")
			shift
			link_aggregation_func $*
		;;
		"mirroring")
			shift
			mirroring_func $*
		;;
		"vlan")
			shift
			vlan_func $*
		;;
		"cos")
			shift
			cos_func $*
		;;
		"")
		;;
		*)
			echo "Syntax error"
		;;
	esac
}
