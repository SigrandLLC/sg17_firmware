#!/bin/sh

kdb="kdb"

_start_or_stop() {
	local start=$1

	eval `${kdb} sls -q sys_pcitbl_`
	nodes=`${kdb} get sys_pcitbl_s${slot}_ifaces`
	for s in $slots; do
		for dev in [0,1,2,3]; do
			local enable=`${kdb} get sys_rs232ip_s${slot}_${dev}_enable`
			[ $enable -eq $start ] && _node_cfg $node $slot $dev
		done
	done
}

_node_cfg() {
	local node=$1
	local slot=$2
	local dev=$3

	local lockfile=/var/lock/ttyRS${dev}
	local pidfile=/var/run/sercd${dev}.pid
	local socat_pidfile=/var/run/socat${dev}.pid

	eval `${kdb} sls sys_rs232ip_s${slot}_${dev}_`
	if [ $enable -eq 1 ]; then # sercd must be started
		[ -f $lockfile ] && exit 1 # port already used
		[ -f $pidfile ] && exit 2 # sercd already started
		sercd -p $listen_port -l $listen_host -P $pidfile $loglevel /dev/$node $lockfile $poll_interval
		if [ $socat_enable -eq 1 ]; then
			if [ -f $socat_pidfile ]; then
			else
				local socat_str_loglvl=""
				local numlvl=0
				while [ $numlvl -lt $socat_loglevel ]; do
					socat_str_loglvl="${socat_str_loglvl} -d"
					numlvl=`expr $numlvl + 1`
				done
				socat $socat_str_loglvl "tcp4:${socat_host}:${socat_port}"
			fi
		fi
	else
		if [ -f $pidfile ]; then
			kill `cat $pidfile`
			rm -f $pidfile
		fi
		if [ -f $socat_pidfile ]; then
			kill `cat $socat_pidfile`
			rm -f $socat_pidfile
		fi
	fi

}

_mode_cfg() {
	local slot=$1
	local dev=$2

	nodes=`${kdb} get sys_pcitbl_s${slot}_ifaces`
	local nodenum=0
	for node in $nodes; do
		_node_cfg "$node" "$slot" "$nodenum"
		nodenum=`expr $nodenum + 1`
	done
}

case "$1" in
	start)
		_start_or_stop 1
		;;
	stop)
		_start_or_stop 0
		;;
	restart)
		_mode_cfg $2 $3
		;;
esac

