diff -ur linux-2.4.18_orig/arch/mips/philips/nino/irq.c linux-2.4.18/arch/mips/philips/nino/irq.c
--- linux-2.4.18_orig/arch/mips/philips/nino/irq.c	2001-09-09 17:43:02.000000000 +0000
+++ linux-2.4.18/arch/mips/philips/nino/irq.c	2007-06-16 13:13:45.000000000 +0000
@@ -277,7 +277,7 @@
     unsigned long flags;
 
     if (irq >= NR_IRQS) {
-	printk(KERN_CRIT __FUNCTION__ ": trying to free IRQ%d\n", irq);
+	printk(KERN_CRIT ": trying to free IRQ%d\n", irq);
 	return;
     }
     for (p = irq + irq_action; (action = *p) != NULL; p = &action->next) {
@@ -293,7 +293,7 @@
 	kfree(action);
 	return;
     }
-    printk(KERN_CRIT __FUNCTION__ ": trying to free free IRQ%d\n", irq);
+    printk(KERN_CRIT ": trying to free free IRQ%d\n", irq);
 }
 
 unsigned long probe_irq_on(void)
diff -ur linux-2.4.18_orig/drivers/mtd/mtdblock.c linux-2.4.18/drivers/mtd/mtdblock.c
--- linux-2.4.18_orig/drivers/mtd/mtdblock.c	2001-10-25 20:58:35.000000000 +0000
+++ linux-2.4.18/drivers/mtd/mtdblock.c	2007-06-16 13:10:36.000000000 +0000
@@ -421,7 +421,7 @@
 		res = 0;
 
 		if (MINOR(req->rq_dev) >= MAX_MTD_DEVICES)
-			panic(__FUNCTION__": minor out of bound");
+			panic(": minor out of bound");
 
 		if ((req->sector + req->current_nr_sectors) > (mtdblk->mtd->size >> 9))
 			goto end_req;
diff -ur linux-2.4.18_orig/fs/file.c linux-2.4.18/fs/file.c
--- linux-2.4.18_orig/fs/file.c	2001-02-09 19:29:44.000000000 +0000
+++ linux-2.4.18/fs/file.c	2007-06-16 13:12:17.000000000 +0000
@@ -36,7 +36,7 @@
 	int size = num * sizeof(struct file *);
 
 	if (!array) {
-		printk (KERN_ERR __FUNCTION__ "array = 0 (num = %d)\n", num);
+		printk (KERN_ERR "array = 0 (num = %d)\n", num);
 		return;
 	}
 
@@ -145,7 +145,7 @@
 	int size = num / 8;
 
 	if (!array) {
-		printk (KERN_ERR __FUNCTION__ "array = 0 (num = %d)\n", num);
+		printk (KERN_ERR "array = 0 (num = %d)\n", num);
 		return;
 	}
 	
diff -ur linux-2.4.18_orig/fs/super.c linux-2.4.18/fs/super.c
--- linux-2.4.18_orig/fs/super.c	2002-02-25 19:38:09.000000000 +0000
+++ linux-2.4.18/fs/super.c	2007-06-16 13:11:20.000000000 +0000
@@ -1030,7 +1030,7 @@
 retry:
 	bdev = bdget(kdev_t_to_nr(ROOT_DEV));
 	if (!bdev)
-		panic(__FUNCTION__ ": unable to allocate root device");
+		panic(": unable to allocate root device");
 	bdev->bd_op = devfs_get_ops (handle); /* Increments module use count */
 	path_start = devfs_generate_path (handle, path + 5, sizeof (path) - 5);
 	mode = FMODE_READ;
