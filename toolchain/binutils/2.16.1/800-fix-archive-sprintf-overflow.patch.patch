# fix-archive-sprintf-overflow.patch.dpatch
# by Brian Stinson <bstinson@ksu.edu>

diff -urNad binutils-h8300-hms-2.16.1~/bfd/archive.c binutils-h8300-hms-2.16.1/bfd/archive.c
--- binutils-h8300-hms-2.16.1~/bfd/archive.c	2005-03-03 05:40:56.000000000 -0600
+++ binutils-h8300-hms-2.16.1/bfd/archive.c	2010-10-28 14:01:25.336819078 -0500
@@ -1350,7 +1350,7 @@
   strncpy (hdr->ar_fmag, ARFMAG, 2);
 
   /* Goddamned sprintf doesn't permit MAXIMUM field lengths.  */
-  sprintf ((hdr->ar_date), "%-12ld", (long) status.st_mtime);
+  sprintf ((hdr->ar_date), "%-11ld", (long) status.st_mtime);
 #ifdef HPUX_LARGE_AR_IDS
   /* HP has a very "special" way to handle UID/GID's with numeric values
      > 99999.  */
@@ -1660,7 +1660,7 @@
       memset (&hdr, 0, sizeof (struct ar_hdr));
       strcpy (hdr.ar_name, ename);
       /* Round size up to even number in archive header.  */
-      sprintf (&(hdr.ar_size[0]), "%-10d",
+      sprintf (&(hdr.ar_size[0]), "%-9d",
 	       (int) ((elength + 1) & ~(bfd_size_type) 1));
       strncpy (hdr.ar_fmag, ARFMAG, 2);
       for (i = 0; i < sizeof (struct ar_hdr); i++)
@@ -1913,7 +1913,7 @@
   sprintf (hdr.ar_date, "%ld", bfd_ardata (arch)->armap_timestamp);
   sprintf (hdr.ar_uid, "%ld", (long) getuid ());
   sprintf (hdr.ar_gid, "%ld", (long) getgid ());
-  sprintf (hdr.ar_size, "%-10d", (int) mapsize);
+  sprintf (hdr.ar_size, "%-9d", (int) mapsize);
   strncpy (hdr.ar_fmag, ARFMAG, 2);
   for (i = 0; i < sizeof (struct ar_hdr); i++)
     if (((char *) (&hdr))[i] == '\0')
@@ -2068,7 +2068,7 @@
 
   memset (&hdr, 0, sizeof (struct ar_hdr));
   hdr.ar_name[0] = '/';
-  sprintf (hdr.ar_size, "%-10d", (int) mapsize);
+  sprintf (hdr.ar_size, "%-9d", (int) mapsize);
   sprintf (hdr.ar_date, "%ld", (long) time (NULL));
   /* This, at least, is what Intel coff sets the values to.  */
   sprintf ((hdr.ar_uid), "%d", 0);
