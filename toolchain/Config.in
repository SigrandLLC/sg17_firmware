#

menu "Toolchain Options"

source "toolchain/uClibc/Config.in"
source "toolchain/binutils/Config.in"
source "toolchain/gcc/Config.in"

if CONFIG_DEVEL
comment "Common Toolchain Options"
endif
if !CONFIG_DEVEL
comment "Using defaults"
endif

config BR2_ENABLE_MULTILIB
	bool "Enable multilib support?" if CONFIG_DEVEL
	default n
	help
	    If you want multilib enabled, enable this...

config BR2_LARGEFILE
	bool "Enable large file (files > 2 GB) support?" if CONFIG_DEVEL
	depends on !BR2_cris
	default y
	help
	    Enable large file (files > 2 GB) support

config BR2_SOFT_FLOAT
	bool "Use software floating point by default" if CONFIG_DEVEL
	default n
	depends on BR2_arm || BR2_mips || BR2_powerpc
	help
	  If your target CPU does not have a Floating Point Unit (FPU) or a
	  kernel FPU emulator, but you still wish to support floating point
	  functions, then everything will need to be compiled with soft floating
	  point support (-msoft-float).

	  Most people will answer N.

config BR2_TARGET_OPTIMIZATION
	string "Target Optimizations" if CONFIG_DEVEL
	default "-Os -pipe -march=i486 -funit-at-a-time" if BR2_i386
	default "-Os -pipe -mips32 -mtune=mips32 -funit-at-a-time" if BR2_mipsel || BR2_mips
	default "-Os -pipe -mcpu=xscale -mno-thumb-interwork -mno-thumb -funit-at-a-time" if BR2_armeb
	default "-Os -pipe -funit-at-a-time"
	help
	  Optimizations to use when building for the target host.

# Might be worth experimenting with for gcc 3.4.x.
#GCC_WITH_CPU:=
#GCC_WITH_ARCH:=
#GCC_WITH_TUNE:=

#GCC_WITH_CPU:=--with-cpu=
#GCC_WITH_ARCH:=--with-arch=
#GCC_WITH_TUNE:=--with-tune=


endmenu

