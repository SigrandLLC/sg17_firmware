text/plain; charset="koi8-r"

Схема нумерации выпусков (release)
----------------------------------

Старая схема нумерации ревизий проекта была построена на внутренней
последовательной нумерации репозитория Subversion. Этот метод обозначения
выпусков (release) не рекомендован и авторами Subversion:
http://subversion.apache.org/faq.html#globalrev

При переходе на Git эта система была сохранена путём простого подсчёта
списка всех ревизий (commits) текущей ветки (команда git:
"git rev-list HEAD").

Кроме того, отсутвовала какая-либо схема организации стабильных
выпусков, поддерживалась только одна главная ветка изменений
(trunk в терминах Subversion, master в Git).


Новая схема отводит главную ветку (master) для разработчиков
и вводит ветки для стабильных выпусков.

<pre>

master
  |
  | ...............
  |
  | _____ release 2
  |/
  | _____ release 1
  |/
  |
  |
  _ начало

</pre>

Версия собранного образа содержит имя ветки и "старое доброе"
число commits (revision) этой ветки.
Чтобы не усложнять скрипт порождения имени выпуска, ветка выпуска
названа по его номеру "1" без обычных в таких случаях "release-1".

Примеры:
	Ветка стабильных выпусков: 1-1500

	Ветка разработчиков:  master-1498

	Имя файла собранного образа стабильного выпуска:
		sg17-r-cp1_1-1500-nofw_zelax.bin

	Имя файла собранного образа ветки разработчиков:
		sg17-r-cp1_master-1498_sigrand.bin


Скрипты
-------

Корневой каталог системы сборки проекта openwrt-midge содержит
несколько вспомогательных скриптов для работы с номерами версий:

* rev.sh: выдаёт полную текущую ревизию проекта, включая ветку выпуска
  и число изменений.
* rev2commit.sh: определяет git commit исходя из номера ревизии
* commit2rev.sh: определяет номер ревизии исходя из git commit

Примеры:

./rev.sh
master-1499

./rev2commit.sh 1499
68101a11c729056cb87a375674822c9420a45772

./commit2rev.sh 68101a11c729056cb87a375674822c9420a45772
1499


Назначение веток
----------------

Как уже описано выше, главная ветка master предназначена разработчикам.
Туда можно вносить дестабилизирующие изменения, не особо заботясь о
работоспособности получаемых прошивок.

Ветки выпуска (release) (сейчас существует только одна ветка "1")
значительно более консервативны, туда можно вносить только проверенные
изменения из основной ветки, как правило, только исправления ошибок.
